import torchfrom trainmodule import TrainModuleimport numpy as npimport onnxruntimedef to_numpy(tensor):    return tensor.detach().cpu().numpy() if tensor.requires_grad else tensor.cpu().numpy()test_input = torch.randn((1, 28, 28))model = TrainModule().load_from_checkpoint('./CKPT/MNIST.ckpt')model.eval()torch_output = model(test_input[None])# torch_output = torch.randn((1, 10))ort_session = onnxruntime.InferenceSession('./data/MNIST.onnx')ort_session.get_providers()input_name = ort_session.get_inputs()[0].nameort_inputs = {ort_session.get_inputs()[0].name: to_numpy(test_input)[None]}ort_outputs = ort_session.run(None, ort_inputs)try:    result = np.testing.assert_allclose(to_numpy(torch_output), ort_outputs[0], rtol=1e-3, atol=1e-5)except AssertionError as e:    print(e)if result is None:    print("우히히힣 잘됐다아앙")    print(np.sum(to_numpy(torch_output) - ort_outputs[0]))